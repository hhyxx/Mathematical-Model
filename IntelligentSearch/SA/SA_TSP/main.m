%% 模拟退火解决TSP问题(很多地方我直接引用的蒙特卡罗模拟里面的代码)
clear;clc
% 获取各个节点的坐标
coord = [
    11003.611100,42102.500000;
    11108.611100,42373.888900;
    11133.333300,42885.833300;
    11155.833300,42712.500000;
    11183.333300,42933.333300;
    11297.500000,42853.333300;
    11310.277800,42929.444400;
    11416.666700,42983.333300;
    11423.888900,43000.277800;
    11438.333300,42057.222200;
    11461.111100,43252.777800;
    11485.555600,43187.222200;
    11503.055600,42855.277800;
    11511.388900,42106.388900;
    11522.222200,42841.944400;
    11569.444400,43136.666700;
    11583.333300,43150.000000;
    11595.000000,43148.055600;
    11600.000000,43150.000000;
    11690.555600,42686.666700;
    11715.833300,41836.111100;
    11751.111100,42814.444400;
    11770.277800,42651.944400;
    11785.277800,42884.444400;
    11822.777800,42673.611100;
    11846.944400,42660.555600;
    11963.055600,43290.555600;
    11973.055600,43026.111100;
    12058.333300,42195.555600;
    12149.444400,42477.500000;
    12286.944400,43355.555600;
    12300.000000,42433.333300;
    12355.833300,43156.388900;
    12363.333300,43189.166700;
    12372.777800,42711.388900;
    12386.666700,43334.722200;
    12421.666700,42895.555600;
    12645.000000,42973.333300
    ];



n = size(coord,1);  % 城市的数目 , 行数

figure(1)  % 新建一个编号为1的图形窗口
plot(coord(:,1),coord(:,2),'o');   % 画出城市的分布散点图
hold on % 图形不关闭


%% 距离矩阵的计算

d = zeros(n);   % 初始化两个城市的距离矩阵全为0

% 只计算对角线一侧剩下的对称生成
for i = 2:n  
    for j = 1:i  
        coord_i = coord(i,:);   
        x_i = coord_i(1);     y_i = coord_i(2);  % 城市i的横坐标为x_i，纵坐标为y_i
        coord_j = coord(j,:);   
        x_j = coord_j(1);     y_j = coord_j(2);  % 城市j的横坐标为x_j，纵坐标为y_j
        d(i,j) = sqrt((x_i-x_j)^2 + (y_i-y_j)^2);   % 计算城市i和j的距离
    end
end



d = d+d';   % 生成距离矩阵的对称的一面



%% 参数初始化

T0 = 1000;   % 初始温度
T = T0;  % 迭代中温度会发生改变，第一次迭代时温度就是T0
maxgen = 1000;  % 最大迭代次数
Lk = 500;   % 每个温度下的迭代次数
alpha = 0.95;   % 温度衰减系数



%%  随机生成一个初始解

path0 = randperm(n);  % 生成一个1-n的随机打乱的序列作为初始的路径



iter_path = path0;            % 初始化用来保存中间结果的行走路径和距离的取值
iter_result = cal(path0,d);   % 调用我们自己写的cal函数计算当前路径的距离



%% 模拟退火过程

for iter = 1 : maxgen  % 外循环, 我这里采用的是指定最大迭代次数
    for i = 1 : Lk  %  内循环，在每个温度下开始迭代
        result0 = cal(path0,d); % 调用我们自己写的 cal 函数计算当前路径的距离
        path1 = get(path0);  % 调用我们自己写的 get 函数生成新的路径
        result1 = cal(path1,d); % 计算新路径的距离
        if result1 < result0    % 如果新路径的距离小于当前路径的距离
            path0 = path1; % 更新当前路径为新路径
            iter_path = [iter_path; path1]; % 将新找到的 path1 添加到中间结果中
            iter_result = [iter_result; result1];  % 将新找到的 result1 添加到中间结果中
        else
            p = exp( -(result1 - result0)/T); % 根据 Metropolis 准则计算一个概率
            if rand(1) < p   % 生成一个随机数和这个概率比较，如果该随机数小于这个概率
                path0 = path1;  % 更新当前路径为新路径
            end
        end
    end
    T = alpha*T;   % 温度下降       
end



[best_result, idx] = min(iter_result);  % 找到最小的距离的值，以及其在向量中的下标
min_path = iter_path(idx,:); % 根据下标找到此时路径
disp('最佳的方案是：'); disp(min_path)
disp('此时最优值是：'); disp(best_result)

min_path = [min_path,min_path(1)];   % 在最短路径的最后面加上一个元素，即第一个点（我们要生成一个封闭的图形）
n = n+1;  % 城市的个数加一个（紧随着上一步）
for i = 1:n-1 
     j = i+1;
    coord_i = coord(min_path(i),:);   x_i = coord_i(1);     y_i = coord_i(2); 
    coord_j = coord(min_path(j),:);   x_j = coord_j(1);     y_j = coord_j(2);
    plot([x_i,x_j],[y_i,y_j],'-')    % 每两个点就作出一条线段，直到所有的城市都走完
    pause(0.2)  % 暂停0.02s再画下一条线段
    hold on
end



